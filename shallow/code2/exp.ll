; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"




define i64 @LLVM_Shallow_exp(i64 %i) {

  start:
    %s = insertvalue { i64, i64 } zeroinitializer, i64 1, 0
    %sa = insertvalue { i64, i64 } %s, i64 %i, 1
    %x = call { i64, i64 } @LLVM_Shallow_exp_0 ({ i64, i64 } %sa)
    %x1 = extractvalue { i64, i64 } %x, 0
    ret i64 %x1
}

define { i64, i64 } @LLVM_Shallow_exp_0({ i64, i64 } %s) {

  start:
    %i = extractvalue { i64, i64 } %s, 1
    %ctd = icmp ne i64 %i, 0
    br i1 %ctd, label %then, label %else

  then:
    %c = extractvalue { i64, i64 } %s, 0
    %ia = extractvalue { i64, i64 } %s, 1
    %ca = mul i64 %c, 2
    %ib = sub i64 %ia, 1
    %s1 = insertvalue { i64, i64 } zeroinitializer, i64 %ca, 0
    %x = insertvalue { i64, i64 } %s1, i64 %ib, 1
    %x1 = call { i64, i64 } @LLVM_Shallow_exp_0 ({ i64, i64 } %x)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %xa = phi { i64, i64 } [ %x1, %then ], [ %s, %else ]
    ret { i64, i64 } %xa
}

define i32 @main(i32 %argc, i8** %argv) {

  start:
    %argc1 = zext i32 %argc to i64
    %r = call i64 @LLVM_Shallow_exp (i64 %argc1)
    %x = trunc i64 %r to i32
    ret i32 %x
}
