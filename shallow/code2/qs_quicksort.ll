; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"




define i64 @LLVM_Examples_qs_partition(i64* %A, i64 %lo, i64 %hi) {

  start:
    %hi1 = sub i64 %hi, 1
    %xa = getelementptr i64, i64* %A, i64 %hi1
    %pivot = load i64, i64* %xa
    %xb = insertvalue { i64, i64 } zeroinitializer, i64 %lo, 0
    %xc = insertvalue { i64, i64 } %xb, i64 %lo, 1
    %xaa = call { i64, i64 } @LLVM_Examples_qs_partition_0 (i64* %A, i64 %hi1, i64 %pivot, { i64, i64 } %xc)
    %uu = extractvalue { i64, i64 } %xaa, 0
    %i = extractvalue { i64, i64 } %xaa, 1
    %tmp = icmp ne i64 %i, %hi1
    br i1 %tmp, label %then, label %else

  then:
    %xba = getelementptr i64, i64* %A, i64 %i
    %xca = load i64, i64* %xba
    %xd = getelementptr i64, i64* %A, i64 %hi1
    %y = load i64, i64* %xd
    %p = getelementptr i64, i64* %A, i64 %i
    store i64 %y, i64* %p
    %pa = getelementptr i64, i64* %A, i64 %hi1
    store i64 %xca, i64* %pa
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    ret i64 %i
}

define void @qs_quicksort(i64* %A, i64 %lo, i64 %hi) {

  start:
    %x = insertvalue { i64, i64 } zeroinitializer, i64 %lo, 0
    %xa = insertvalue { i64, i64 } %x, i64 %hi, 1
    call void @LLVM_Examples_qs_quicksort_0 (i64* %A, { i64, i64 } %xa)
    ret void
}

define { i64, i64 } @LLVM_Examples_qs_partition_0(i64* %A, i64 %hia, i64 %pivot, { i64, i64 } %s) {

  start:
    %i = extractvalue { i64, i64 } %s, 0
    %s1 = extractvalue { i64, i64 } %s, 1
    %ctd = icmp ult i64 %i, %hia
    br i1 %ctd, label %then, label %else

  then:
    %ia = extractvalue { i64, i64 } %s, 0
    %sa = extractvalue { i64, i64 } %s, 1
    %x = getelementptr i64, i64* %A, i64 %ia
    %Aj = load i64, i64* %x
    %tmp = icmp ult i64 %Aj, %pivot
    br i1 %tmp, label %thena, label %elsea

  thena:
    %tmpa = icmp ne i64 %sa, %ia
    br i1 %tmpa, label %thenb, label %elseb

  thenb:
    %xa = getelementptr i64, i64* %A, i64 %sa
    %xb = load i64, i64* %xa
    %xc = getelementptr i64, i64* %A, i64 %ia
    %y = load i64, i64* %xc
    %p = getelementptr i64, i64* %A, i64 %sa
    store i64 %y, i64* %p
    %pa = getelementptr i64, i64* %A, i64 %ia
    store i64 %xb, i64* %pa
    br label %ctd_ifb

  elseb:
    br label %ctd_ifb

  ctd_ifb:
    %x1 = add i64 %sa, 1
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %sb = phi i64 [ %x1, %ctd_ifb ], [ %sa, %elsea ]
    %ib = add i64 %ia, 1
    %xaa = insertvalue { i64, i64 } zeroinitializer, i64 %ib, 0
    %x1a = insertvalue { i64, i64 } %xaa, i64 %sb, 1
    %x2 = call { i64, i64 } @LLVM_Examples_qs_partition_0 (i64* %A, i64 %hia, i64 %pivot, { i64, i64 } %x1a)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %xd = phi { i64, i64 } [ %x2, %ctd_ifa ], [ %s, %else ]
    ret { i64, i64 } %xd
}

define void @LLVM_Examples_qs_quicksort_0(i64* %A, { i64, i64 } %x) {

  start:
    %lo = extractvalue { i64, i64 } %x, 0
    %hi = extractvalue { i64, i64 } %x, 1
    %tmp = icmp ult i64 %lo, %hi
    br i1 %tmp, label %then, label %else

  then:
    %p = call i64 @LLVM_Examples_qs_partition (i64* %A, i64 %lo, i64 %hi)
    %tmpa = sub i64 %p, 1
    %xb = insertvalue { i64, i64 } zeroinitializer, i64 %lo, 0
    %xc = insertvalue { i64, i64 } %xb, i64 %tmpa, 1
    call void @LLVM_Examples_qs_quicksort_0 (i64* %A, { i64, i64 } %xc)
    %tmpaa = add i64 %p, 1
    %xe = insertvalue { i64, i64 } zeroinitializer, i64 %tmpaa, 0
    %x1 = insertvalue { i64, i64 } %xe, i64 %hi, 1
    call void @LLVM_Examples_qs_quicksort_0 (i64* %A, { i64, i64 } %x1)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    ret void
}
