; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"




define i1 @streq(i8* %s_1, i8* %s_2) {

  start:
    %x = insertvalue { i8*, i8* } zeroinitializer, i8* %s_1, 0
    %x1 = insertvalue { i8*, i8* } %x, i8* %s_2, 1
    %x2 = call { i8*, i8* } @LLVM_Examples_streq_0 ({ i8*, i8* } %x1)
    %s_11 = extractvalue { i8*, i8* } %x2, 0
    %s_21 = extractvalue { i8*, i8* } %x2, 1
    %x3 = load i8, i8* %s_11
    %x4 = load i8, i8* %s_21
    %x5 = icmp eq i8 %x3, %x4
    ret i1 %x5
}

define i64 @my_strlen(i8* %p) {

  start:
    %x = insertvalue { i64, i8* } zeroinitializer, i64 0, 0
    %x1 = insertvalue { i64, i8* } %x, i8* %p, 1
    %x2 = call { i64, i8* } @LLVM_Examples_strlen_0 ({ i64, i8* } %x1)
    %l = extractvalue { i64, i8* } %x2, 0
    %uu = extractvalue { i64, i8* } %x2, 1
    ret i64 %l
}

define { i8*, i8* } @LLVM_Examples_streq_0({ i8*, i8* } %s) {

  start:
    %s_1 = extractvalue { i8*, i8* } %s, 0
    %s_2 = extractvalue { i8*, i8* } %s, 1
    %x = load i8, i8* %s_1
    %y = load i8, i8* %s_2
    %x1 = icmp eq i8 %x, 0
    %tmp = sub i1 1, %x1
    %x2 = icmp eq i8 %x, %y
    %ctd = and i1 %tmp, %x2
    br i1 %ctd, label %then, label %else

  then:
    %s_11 = extractvalue { i8*, i8* } %s, 0
    %s_21 = extractvalue { i8*, i8* } %s, 1
    %s_12 = getelementptr i8, i8* %s_11, i8 1
    %s_22 = getelementptr i8, i8* %s_21, i8 1
    %x3 = insertvalue { i8*, i8* } zeroinitializer, i8* %s_12, 0
    %x4 = insertvalue { i8*, i8* } %x3, i8* %s_22, 1
    %x5 = call { i8*, i8* } @LLVM_Examples_streq_0 ({ i8*, i8* } %x4)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x3a = phi { i8*, i8* } [ %x5, %then ], [ %s, %else ]
    ret { i8*, i8* } %x3a
}

define { i64, i8* } @LLVM_Examples_strlen_0({ i64, i8* } %s) {

  start:
    %l = extractvalue { i64, i8* } %s, 0
    %p = extractvalue { i64, i8* } %s, 1
    %c = load i8, i8* %p
    %ctd = icmp ne i8 %c, 0
    br i1 %ctd, label %then, label %else

  then:
    %l1 = extractvalue { i64, i8* } %s, 0
    %p1 = extractvalue { i64, i8* } %s, 1
    %p2 = getelementptr i8, i8* %p1, i32 1
    %l2 = add i64 %l1, 1
    %x = insertvalue { i64, i8* } zeroinitializer, i64 %l2, 0
    %x1 = insertvalue { i64, i8* } %x, i8* %p2, 1
    %x2 = call { i64, i8* } @LLVM_Examples_strlen_0 ({ i64, i8* } %x1)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %xa = phi { i64, i8* } [ %x2, %then ], [ %s, %else ]
    ret { i64, i8* } %xa
}
