; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"




define i32 @euclid(i32 %a, i32 %b) {

  start:
    %x = insertvalue { i32, i32 } zeroinitializer, i32 %a, 0
    %x1 = insertvalue { i32, i32 } %x, i32 %b, 1
    %x2 = call { i32, i32 } @LLVM_Examples_euclid_0 ({ i32, i32 } %x1)
    %a1 = extractvalue { i32, i32 } %x2, 0
    %b1 = extractvalue { i32, i32 } %x2, 1
    ret i32 %a1
}

define { i32, i32 } @LLVM_Examples_euclid_0({ i32, i32 } %s) {

  start:
    %a = extractvalue { i32, i32 } %s, 0
    %x = extractvalue { i32, i32 } %s, 1
    %ctd = icmp ne i32 %a, %x
    br i1 %ctd, label %then, label %else

  then:
    %a1 = extractvalue { i32, i32 } %s, 0
    %b = extractvalue { i32, i32 } %s, 1
    %x1 = icmp ule i32 %a1, %b
    br i1 %x1, label %thena, label %elsea

  thena:
    %b1 = sub i32 %b, %a1
    %x2 = insertvalue { i32, i32 } zeroinitializer, i32 %a1, 0
    %x3 = insertvalue { i32, i32 } %x2, i32 %b1, 1
    br label %ctd_ifa

  elsea:
    %a2 = sub i32 %a1, %b
    %x2a = insertvalue { i32, i32 } zeroinitializer, i32 %a2, 0
    %x3a = insertvalue { i32, i32 } %x2a, i32 %b, 1
    br label %ctd_ifa

  ctd_ifa:
    %x2b = phi { i32, i32 } [ %x3, %thena ], [ %x3a, %elsea ]
    %x3b = call { i32, i32 } @LLVM_Examples_euclid_0 ({ i32, i32 } %x2b)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x1a = phi { i32, i32 } [ %x3b, %ctd_ifa ], [ %s, %else ]
    ret { i32, i32 } %x1a
}
