\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\citation{Muss97}
\citation{libstdc++}
\citation{La19-llvm}
\citation{Peters02}
\citation{GRBBH15}
\citation{bs_flaw_blogpost}
\citation{libc++}
\citation{GRBBH15,BSSU17}
\citation{Muss97}
\citation{Hoare61}
\citation{Will64}
\citation{libstdc++}
\@writefile{toc}{\contentsline {section}{Abstract}{1}{section*.1}}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}The Introsort Algorithm}{1}{section.2}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1}{\ignorespaces Introsort\relax }}{1}{algorithm.1}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{alg:introsort}{{1}{1}{Introsort\relax }{algorithm.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Partitioning}{2}{subsection.2.1}}
\newlabel{partition:nextl_loop}{{3}{2}{Partitioning}{subsection.2.1}{}}
\newlabel{partition:nexth_loop}{{5}{2}{Partitioning}{subsection.2.1}{}}
\newlabel{line:partition:pivot_selection}{{10}{2}{Partitioning}{subsection.2.1}{}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {2}{\ignorespaces Partitioning\relax }}{2}{algorithm.2}}
\newlabel{alg:partition}{{2}{2}{Partitioning\relax }{algorithm.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Unguarded Insertion Sort}{2}{subsection.2.2}}
\newlabel{alg:insert:loophead}{{3}{2}{Unguarded Insertion Sort}{subsection.2.2}{}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {3}{\ignorespaces Final Insertion Sort\relax }}{2}{algorithm.3}}
\newlabel{alg:insort}{{3}{2}{Final Insertion Sort\relax }{algorithm.3}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Notation}{2}{section.3}}
\citation{LaTu12}
\citation{NPW02}
\citation{Kr10}
\citation{Josu12}
\@writefile{toc}{\contentsline {section}{\numberline {4}The Isabelle Refinement Framework}{3}{section.4}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Verifying Introsort}{3}{section.5}}
\citation{BBP13}
\newlabel{thm:partial_introsort_correct}{{5.1}{4}{}{theorem.5.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1}Refinement}{4}{subsection.5.1}}
\newlabel{sec:refinement}{{5.1}{4}{Refinement}{subsection.5.1}{}}
\newlabel{thm:slice_partial_introsort_refines}{{5.2}{4}{}{theorem.5.2}{}}
\newlabel{thm:slice_partial_introsort_correct}{{5.3}{5}{}{theorem.5.3}{}}
\newlabel{thm:introsort_correct}{{5.4}{5}{}{theorem.5.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Modular verification of Introsort. The boxes show the different algorithms and the specifications they depend on. Arrows point from an algorithm to the specification that it implements.\relax }}{5}{figure.caption.3}}
\newlabel{fig:modular}{{1}{5}{Modular verification of Introsort. The boxes show the different algorithms and the specifications they depend on. Arrows point from an algorithm to the specification that it implements.\relax }{figure.caption.3}{}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Assembling the Implementation}{5}{section.6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.1}Unguarded Insertion Sort}{5}{subsection.6.1}}
\newlabel{sec:unguarded_insort}{{6.1}{5}{Unguarded Insertion Sort}{subsection.6.1}{}}
\citation{LaWi19-IMP2,Gri19-AFP,La16}
\citation{CLRS09}
\citation{SeWa11}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.2}Heapsort and Partition}{6}{subsection.6.2}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {4}{\ignorespaces Pseudocode of sift-down function with swap\relax }}{6}{algorithm.4}}
\newlabel{alg:sift_down_swap}{{4}{6}{Pseudocode of sift-down function with swap\relax }{algorithm.4}{}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {5}{\ignorespaces Pseudocode of optimized sift-down function\relax }}{6}{algorithm.5}}
\newlabel{alg:sift_down_opt}{{5}{6}{Pseudocode of optimized sift-down function\relax }{algorithm.5}{}}
\citation{La19-llvm}
\citation{La15,La19-llvm}
\citation{La15,La19-llvm}
\@writefile{toc}{\contentsline {section}{\numberline {7}Imperative Implementation}{7}{section.7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1}The Sepref Tool}{7}{subsection.7.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Implementation for \lstinline [language=isabelle]{insert} procedure with \lstinline [language=isabelle]{G=false} generated by the Sepref tool, for 64bit signed integer elements. This definition is within the executable fragment of Isabelle-LLVM, i.e., the Isabelle LLVM code generator can, after preprocessing, translate it to LLVM-IR. Moreover, note that the function does not depend on the lower bound parameter \lstinline [language=isabelle]$l$ any more, as this was only required in the guarded version. \relax }}{7}{figure.caption.4}}
\newlabel{fig:ug_insort_isa_llvm}{{2}{7}{Implementation for \is {insert} procedure with \is {G=false} generated by the Sepref tool, for 64bit signed integer elements. This definition is within the executable fragment of Isabelle-LLVM, i.e., the Isabelle LLVM code generator can, after preprocessing, translate it to LLVM-IR. Moreover, note that the function does not depend on the lower bound parameter \is $l$ any more, as this was only required in the guarded version. \relax }{figure.caption.4}{}}
\citation{Rey02,CHY07}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces LLVM-IR generated by Isabelle-LLVM for the definition from Figure\nonbreakingspace \ref  {fig:ug_insort_isa_llvm}. We display the code after an LLVM optimization pass that eliminates some redundant operations generated by Isabelle-LLVM, and thus makes the code more readable. Note that we kept the unused parameter \%l. LLVM will eliminate it by inlining the function. \relax }}{8}{figure.caption.5}}
\newlabel{fig:ug_insort_llvm}{{3}{8}{LLVM-IR generated by Isabelle-LLVM for the definition from Figure~\ref {fig:ug_insort_isa_llvm}. We display the code after an LLVM optimization pass that eliminates some redundant operations generated by Isabelle-LLVM, and thus makes the code more readable. Note that we kept the unused parameter \%l. LLVM will eliminate it by inlining the function. \relax }{figure.caption.5}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2}The Isabelle-LLVM Code Generator}{8}{subsection.7.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces An example Isabelle command to export LLVM code for a string sorting function, and the generated header file. Strings are represented as dynamic arrays of characters. Isabelle will refuse to export functions whose signatures would be changed by C. Moreover, structure fields in LLVM are indexed by consecutive numbers, rather than named by meaningful names. Our extension allows to define properly named structures for the header file, and checks that these definitions are actually compatible with the LLVM signatures. \relax }}{8}{figure.caption.6}}
\newlabel{fig:export}{{4}{8}{An example Isabelle command to export LLVM code for a string sorting function, and the generated header file. Strings are represented as dynamic arrays of characters. Isabelle will refuse to export functions whose signatures would be changed by C. Moreover, structure fields in LLVM are indexed by consecutive numbers, rather than named by meaningful names. Our extension allows to define properly named structures for the header file, and checks that these definitions are actually compatible with the LLVM signatures. \relax }{figure.caption.6}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3}Separation Logic and Ownership}{8}{subsection.7.3}}
\citation{rustlang}
\citation{boost}
\citation{Bent93}
\@writefile{toc}{\contentsline {section}{\numberline {8}Benchmarks}{10}{section.8}}
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces Benchmark results, as the ratio $(i/c - 1)*100$, where $i$ and $c$ are the average wall-times of verified Introsort and std::sort. That is, negative values indicate that Introsort was faster, and positive values indicate that std::sort was faster. \relax }}{10}{table.caption.7}}
\newlabel{tab:benchmarks}{{1}{10}{Benchmark results, as the ratio $(i/c - 1)*100$, where $i$ and $c$ are the average wall-times of verified Introsort and std::sort. That is, negative values indicate that Introsort was faster, and positive values indicate that std::sort was faster. \relax }{table.caption.7}{}}
\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces Intervals of the results (wall time in seconds) for repeating each experiment 74 times, in an interleaved fashion. The $r$ fields display $(\qopname  \relax m{max}/\qopname  \relax m{min}-1)*100$, i.e., the value that would appear in Table\nonbreakingspace \ref  {tab:benchmarks} when comparing the slowest and fastest run of the same experiment. \relax }}{10}{table.caption.8}}
\newlabel{tab:bench_longrun}{{2}{10}{Intervals of the results (wall time in seconds) for repeating each experiment 74 times, in an interleaved fashion. The $r$ fields display $(\max /\min -1)*100$, i.e., the value that would appear in Table~\ref {tab:benchmarks} when comparing the slowest and fastest run of the same experiment. \relax }{table.caption.8}{}}
\@writefile{toc}{\contentsline {section}{\numberline {9}Conclusions}{10}{section.9}}
\citation{ELNN13,BrLa18,WiLa18}
\citation{gordon-et-al-1979}
\citation{La19-llvm}
\citation{BHS07}
\citation{App14}
\citation{BL09}
\citation{CBGD18}
\citation{KTMK19,MyOw14}
\citation{FoHoa71}
\citation{FiMa99}
\citation{GRBBH15}
\citation{BSSU17}
\citation{HaLa19}
\citation{boost}
\citation{EdWe16}
\citation{BCOP05}
\bibstyle{ACM-Reference-Format}
\bibdata{bib}
\bibcite{App14}{{1}{2014}{{Appel et~al\unhbox \voidb@x \hbox {.}}}{{Appel, Dockins, Hobor, Beringer, Dodds, Stewart, Blazy, and Leroy}}}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.1}More Related Work}{11}{subsection.9.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.2}Future Work}{11}{subsection.9.2}}
\@writefile{toc}{\contentsline {paragraph}{Acknowledgements}{11}{section*.9}}
\bibcite{BHS07}{{2}{2007}{{Beckert et~al\unhbox \voidb@x \hbox {.}}}{{Beckert, H\"{a}hnle, and Schmitt}}}
\bibcite{BSSU17}{{3}{2017}{{Beckert et~al\unhbox \voidb@x \hbox {.}}}{{Beckert, Schiffl, Schmitt, and Ulbrich}}}
\bibcite{Bent93}{{4}{1993}{{Bentley and McIlroy}}{{Bentley and McIlroy}}}
\bibcite{BBP13}{{5}{2013}{{Blanchette et~al\unhbox \voidb@x \hbox {.}}}{{Blanchette, B{\"{o}}hme, and Paulson}}}
\bibcite{BL09}{{6}{2009}{{Blazy and Leroy}}{{Blazy and Leroy}}}
\bibcite{bs_flaw_blogpost}{{7}{[n. d.]}{{Bloch}}{{Bloch}}}
\bibcite{boost}{{8}{[n. d.]}{{boost}}{{boost}}}
\bibcite{BCOP05}{{9}{2005}{{Bornat et~al\unhbox \voidb@x \hbox {.}}}{{Bornat, Calcagno, O'Hearn, and Parkinson}}}
\bibcite{BrLa18}{{10}{2018}{{Brunner and Lammich}}{{Brunner and Lammich}}}
\bibcite{CHY07}{{11}{2007}{{Calcagno et~al\unhbox \voidb@x \hbox {.}}}{{Calcagno, O'Hearn, and Yang}}}
\bibcite{CBGD18}{{12}{2018}{{Cao et~al\unhbox \voidb@x \hbox {.}}}{{Cao, Beringer, Gruetter, Dodds, and W.~Appel}}}
\bibcite{CLRS09}{{13}{2009}{{Cormen et~al\unhbox \voidb@x \hbox {.}}}{{Cormen, Leiserson, Rivest, and Stein}}}
\bibcite{GRBBH15}{{14}{2015}{{de~Gouw et~al\unhbox \voidb@x \hbox {.}}}{{de~Gouw, Rot, de~Boer, Bubel, and H{\"a}hnle}}}
\bibcite{EdWe16}{{15}{2016}{{Edelkamp and Wei{\ss }}}{{Edelkamp and Wei{\ss }}}}
\bibcite{ELNN13}{{16}{2013}{{Esparza et~al\unhbox \voidb@x \hbox {.}}}{{Esparza, Lammich, Neumann, Nipkow, Schimpf, and Smaus}}}
\bibcite{FiMa99}{{17}{1999}{{Filli{\^a}tre and Magaud}}{{Filli{\^a}tre and Magaud}}}
\bibcite{FoHoa71}{{18}{1971}{{Foley and Hoare}}{{Foley and Hoare}}}
\bibcite{libstdc++}{{19}{[n. d.]}{{GNU C++ Library}}{{GNU C++ Library}}}
\bibcite{gordon-et-al-1979}{{20}{1979}{{Gordon et~al\unhbox \voidb@x \hbox {.}}}{{Gordon, Milner, and Wadsworth}}}
\bibcite{Gri19-AFP}{{21}{2019}{{Griebel}}{{Griebel}}}
\bibcite{HaLa19}{{22}{2019}{{Haslbeck and Lammich}}{{Haslbeck and Lammich}}}
\bibcite{Hoare61}{{23}{1961}{{Hoare}}{{Hoare}}}
\bibcite{Josu12}{{24}{2012}{{Josuttis}}{{Josuttis}}}
\bibcite{KTMK19}{{25}{2019}{{KIAM~TAN et~al\unhbox \voidb@x \hbox {.}}}{{KIAM~TAN, MYREEN, KUMAR, FOX, OWENS, and NORRISH}}}
\bibcite{Kr10}{{26}{2010}{{Krauss}}{{Krauss}}}
\bibcite{La15}{{27}{2015}{{Lammich}}{{Lammich}}}
\bibcite{La16}{{28}{2016}{{Lammich}}{{Lammich}}}
\bibcite{La19-llvm}{{29}{2019}{{Lammich}}{{Lammich}}}
\bibcite{LaTu12}{{30}{2012}{{Lammich and Tuerk}}{{Lammich and Tuerk}}}
\bibcite{LaWi19-IMP2}{{31}{2019}{{Lammich and Wimmer}}{{Lammich and Wimmer}}}
\bibcite{libc++}{{32}{[n. d.]}{{libc++}}{{libc++}}}
\bibcite{Muss97}{{33}{1997}{{MUSSER}}{{MUSSER}}}
\bibcite{MyOw14}{{34}{2014}{{Myreen and Owens}}{{Myreen and Owens}}}
\bibcite{NPW02}{{35}{2002}{{Nipkow et~al\unhbox \voidb@x \hbox {.}}}{{Nipkow, Paulson, and Wenzel}}}
\bibcite{Peters02}{{36}{[n. d.]}{{Peters}}{{Peters}}}
\bibcite{Rey02}{{37}{2002}{{Reynolds}}{{Reynolds}}}
\bibcite{rustlang}{{38}{[n. d.]}{{Rust Programmin Language}}{{Rust Programmin Language}}}
\bibcite{SeWa11}{{39}{2011}{{Sedgewick and Wayne}}{{Sedgewick and Wayne}}}
\bibcite{Will64}{{40}{1964}{{WILLIAMS}}{{WILLIAMS}}}
\bibcite{WiLa18}{{41}{2018}{{Wimmer and Lammich}}{{Wimmer and Lammich}}}
\newlabel{tocindent-1}{0pt}
\newlabel{tocindent0}{0pt}
\newlabel{tocindent1}{4.65pt}
\newlabel{tocindent2}{11.49998pt}
\newlabel{tocindent3}{0pt}
\@writefile{toc}{\contentsline {section}{References}{12}{section*.11}}
\newlabel{TotPages}{{12}{12}{}{page.12}{}}
