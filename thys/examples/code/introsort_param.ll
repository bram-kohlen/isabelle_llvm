; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"






define i64 @Sorting_Log2_word_clz_impl(i64 %x) {

  start:
    %x1 = icmp eq i64 %x, 0
    br i1 %x1, label %then, label %else

  then:
    br label %ctd_if

  else:
    %x2 = call i64 @Sorting_Log2_word_clz_impl1 (i64 %x)
    br label %ctd_if

  ctd_if:
    %x3 = phi i64 [ %x2, %else ], [ 64, %then ]
    ret i64 %x3
}

define i64 @Sorting_Log2_word_clz_impl1(i64 %x) {

  start:
    %x1 = insertvalue { i64, i64 } zeroinitializer, i64 0, 0
    %xa = insertvalue { i64, i64 } %x1, i64 %x, 1
    br label %while_start

  while_start:
    %xb = phi { i64, i64 } [ %x4, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { i64, i64 } %xb, 0
    %x2 = extractvalue { i64, i64 } %xb, 1
    %x3 = icmp slt i64 0, %x2
    br i1 %x3, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64, i64 } %xb, 0
    %a2 = extractvalue { i64, i64 } %xb, 1
    %xaa = add i64 %a11, 1
    %xba = shl i64 %a2, 1
    %xca = insertvalue { i64, i64 } zeroinitializer, i64 %xaa, 0
    %x4 = insertvalue { i64, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64, i64 } %xb, 0
    %a21 = extractvalue { i64, i64 } %xb, 1
    ret i64 %a12
}

define i64* @Proto_IICF_EOArray_swap_eo_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr i64, i64* %x, i64 %x1
    %r = load i64, i64* %x3
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = getelementptr i64, i64* %a2, i64 %x2
    %ra = load i64, i64* %xc
    %xd = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xe = insertvalue { i64, i64* } %xd, i64* %a2, 1
    %a1a = extractvalue { i64, i64* } %xe, 0
    %a2a = extractvalue { i64, i64* } %xe, 1
    %p = getelementptr i64, i64* %a2a, i64 %x1
    store i64 %a1a, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %x2
    store i64 %a1, i64* %pa
    ret i64* %a2a
}

define i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl(i32* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr i32, i32* %x, i64 %x1
    %xa = load i32, i32* %x3
    %xb = getelementptr i32, i32* %x, i64 %x2
    %x4 = load i32, i32* %xb
    %x5 = icmp slt i32 %xa, %x4
    ret i1 %x5
}

define i64* @heapsort_idxs(i32* %x, i64* %x1, i64 %x2, i64 %x3) {

  start:
    %x4 = sub i64 %x3, %x2
    %xa = icmp slt i64 1, %x4
    br i1 %xa, label %then, label %else

  then:
    %xb = call i64* @Sorting_Ex_Array_Idxs_IDXO_heapify_btu_impl (i32* %x, i64 %x2, i64 %x3, i64* %x1)
    %xc = insertvalue { i64*, i64 } zeroinitializer, i64* %xb, 0
    %xd = insertvalue { i64*, i64 } %xc, i64 %x3, 1
    br label %while_start

  while_start:
    %xca = phi { i64*, i64 } [ %x6, %while_body ], [ %xd, %then ]
    %a1 = extractvalue { i64*, i64 } %xca, 0
    %a2 = extractvalue { i64*, i64 } %xca, 1
    %xda = add i64 %x2, 1
    %x5 = icmp slt i64 %xda, %a2
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xca, 0
    %a21 = extractvalue { i64*, i64 } %xca, 1
    %xda1 = sub i64 %a21, 1
    %xea = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a11, i64 %x2, i64 %xda1)
    %xfa = sub i64 %a21, 1
    %xg = call i64* @Sorting_Ex_Array_Idxs_IDXO_sift_down_impl (i32* %x, i64 %x2, i64 %xfa, i64 %x2, i64* %xea)
    %xha = sub i64 %a21, 1
    %xi = insertvalue { i64*, i64 } zeroinitializer, i64* %xg, 0
    %x6 = insertvalue { i64*, i64 } %xi, i64 %xha, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xca, 0
    %a22 = extractvalue { i64*, i64 } %xca, 1
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x7 = phi i64* [ %x1, %else ], [ %a12, %while_end ]
    ret i64* %x7
}

define i64* @introsort_idxs(i32* %x, i64* %x1, i64 %x2, i64 %x3) {

  start:
    %x4 = sub i64 %x3, %x2
    %xa = icmp slt i64 1, %x4
    br i1 %xa, label %then, label %else

  then:
    %xb = sub i64 %x3, %x2
    %xc = sub i64 64, 1
    %xd = call i64 @Sorting_Log2_word_clz_impl (i64 %xb)
    %xe = sub i64 %xc, %xd
    %xf = mul i64 %xe, 2
    %xg = call i64* @Sorting_Ex_Array_Idxs_IDXO_introsort_aux_impl (i32* %x, i64* %x1, i64 %x2, i64 %x3, i64 %xf)
    %x5 = call i64* @Sorting_Ex_Array_Idxs_IDXO_final_insertion_sort_impl (i32* %x, i64* %xg, i64 %x2, i64 %x3)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x6 = phi i64* [ %x1, %else ], [ %x5, %then ]
    ret i64* %x6
}

define i64* @Sorting_Ex_Array_Idxs_IDXO_sift_down_impl(i32* %x, i64 %x1, i64 %x2, i64 %x3, i64* %x4) {

  start:
    %x5 = sub i64 %x3, %x1
    %xa = add i64 %x1, %x5
    %xb = getelementptr i64, i64* %x4, i64 %xa
    %r = load i64, i64* %xb
    %xc = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xd = insertvalue { i64, i64* } %xc, i64* %x4, 1
    %a1 = extractvalue { i64, i64* } %xd, 0
    %a2 = extractvalue { i64, i64* } %xd, 1
    %xe = insertvalue { i64, i1 } zeroinitializer, i64 %x5, 0
    %tmpb = insertvalue { i64, i1 } %xe, i1 1, 1
    %xf = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2, 0
    %xg = insertvalue { i64*, { i64, i1 } } %xf, { i64, i1 } %tmpb, 1
    br label %while_start

  while_start:
    %xea = phi { i64*, { i64, i1 } } [ %x17, %ctd_if ], [ %xg, %start ]
    %a1a = extractvalue { i64*, { i64, i1 } } %xea, 0
    %xfa = extractvalue { i64*, { i64, i1 } } %xea, 1
    %a1b = extractvalue { i64, i1 } %xfa, 0
    %a2b = extractvalue { i64, i1 } %xfa, 1
    %xga = sub i64 %x2, %x1
    %xha = sub i64 %xga, 1
    %xia = udiv i64 %xha, 2
    %xj = icmp slt i64 %a1b, %xia
    %x6 = and i1 %xj, %a2b
    br i1 %x6, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { i64*, { i64, i1 } } %xea, 0
    %xfa1 = extractvalue { i64*, { i64, i1 } } %xea, 1
    %a1b1 = extractvalue { i64, i1 } %xfa1, 0
    %a2b1 = extractvalue { i64, i1 } %xfa1, 1
    %xga1 = mul i64 2, %a1b1
    %xha1 = add i64 %xga1, 1
    %xi = mul i64 2, %a1b1
    %xja = add i64 %xi, 2
    %xk = add i64 %x1, %xha1
    %xl = add i64 %x1, %xja
    %xm = getelementptr i64, i64* %a1a1, i64 %xk
    %ra = load i64, i64* %xm
    %xn = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xo = insertvalue { i64, i64* } %xn, i64* %a1a1, 1
    %a1c = extractvalue { i64, i64* } %xo, 0
    %a2a = extractvalue { i64, i64* } %xo, 1
    %xp = getelementptr i64, i64* %a2a, i64 %xl
    %rb = load i64, i64* %xp
    %xq = insertvalue { i64, i64* } zeroinitializer, i64 %rb, 0
    %xr = insertvalue { i64, i64* } %xq, i64* %a2a, 1
    %a1aa = extractvalue { i64, i64* } %xr, 0
    %a2aa = extractvalue { i64, i64* } %xr, 1
    %xs = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %x, i64 %a1c, i64 %a1aa)
    %p = getelementptr i64, i64* %a2aa, i64 %xk
    store i64 %a1c, i64* %p
    %pa = getelementptr i64, i64* %a2aa, i64 %xl
    store i64 %a1aa, i64* %pa
    br i1 %xs, label %then, label %else

  then:
    %xw = add i64 %x1, %xja
    %xx = getelementptr i64, i64* %a1a1, i64 %xw
    %rc = load i64, i64* %xx
    %xy = insertvalue { i64, i64* } zeroinitializer, i64 %rc, 0
    %xz = insertvalue { i64, i64* } %xy, i64* %a1a1, 1
    %a1d = extractvalue { i64, i64* } %xz, 0
    %a2c = extractvalue { i64, i64* } %xz, 1
    %ya = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %x, i64 %a1, i64 %a1d)
    %pb = getelementptr i64, i64* %a2c, i64 %xw
    store i64 %a1d, i64* %pb
    br i1 %ya, label %thena, label %elsea

  thena:
    %yd = add i64 %x1, %xja
    %ye = getelementptr i64, i64* %a1a1, i64 %yd
    %rd = load i64, i64* %ye
    %yf = insertvalue { i64, i64* } zeroinitializer, i64 %rd, 0
    %yg = insertvalue { i64, i64* } %yf, i64* %a1a1, 1
    %a1ca = extractvalue { i64, i64* } %yg, 0
    %a2ca = extractvalue { i64, i64* } %yg, 1
    %yh = add i64 %x1, %a1b1
    %pc = getelementptr i64, i64* %a2ca, i64 %yh
    store i64 %a1ca, i64* %pc
    %yj = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2ca, 0
    %yk = insertvalue { i64, i1 } zeroinitializer, i64 %xja, 0
    %x7 = insertvalue { i64, i1 } %yk, i1 1, 1
    %x8 = insertvalue { i64*, { i64, i1 } } %yj, { i64, i1 } %x7, 1
    br label %ctd_ifa

  elsea:
    %yd1 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a1a1, 0
    %ye1 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x9 = insertvalue { i64, i1 } %ye1, i1 0, 1
    %x10 = insertvalue { i64*, { i64, i1 } } %yd1, { i64, i1 } %x9, 1
    br label %ctd_ifa

  ctd_ifa:
    %x11 = phi { i64*, { i64, i1 } } [ %x10, %elsea ], [ %x8, %thena ]
    br label %ctd_if

  else:
    %xw1 = add i64 %x1, %xha1
    %xx1 = getelementptr i64, i64* %a1a1, i64 %xw1
    %rc1 = load i64, i64* %xx1
    %xy1 = insertvalue { i64, i64* } zeroinitializer, i64 %rc1, 0
    %xz1 = insertvalue { i64, i64* } %xy1, i64* %a1a1, 1
    %a1d1 = extractvalue { i64, i64* } %xz1, 0
    %a2c1 = extractvalue { i64, i64* } %xz1, 1
    %ya1 = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %x, i64 %a1, i64 %a1d1)
    %pb1 = getelementptr i64, i64* %a2c1, i64 %xw1
    store i64 %a1d1, i64* %pb1
    br i1 %ya1, label %thenb, label %elseb

  thenb:
    %yd2 = add i64 %x1, %xha1
    %ye2 = getelementptr i64, i64* %a1a1, i64 %yd2
    %rd1 = load i64, i64* %ye2
    %yf1 = insertvalue { i64, i64* } zeroinitializer, i64 %rd1, 0
    %yg1 = insertvalue { i64, i64* } %yf1, i64* %a1a1, 1
    %a1ca1 = extractvalue { i64, i64* } %yg1, 0
    %a2ca1 = extractvalue { i64, i64* } %yg1, 1
    %yh1 = add i64 %x1, %a1b1
    %pc1 = getelementptr i64, i64* %a2ca1, i64 %yh1
    store i64 %a1ca1, i64* %pc1
    %yj1 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2ca1, 0
    %yk1 = insertvalue { i64, i1 } zeroinitializer, i64 %xha1, 0
    %x12 = insertvalue { i64, i1 } %yk1, i1 1, 1
    %x13 = insertvalue { i64*, { i64, i1 } } %yj1, { i64, i1 } %x12, 1
    br label %ctd_ifb

  elseb:
    %yd3 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a1a1, 0
    %ye3 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x14 = insertvalue { i64, i1 } %ye3, i1 0, 1
    %x15 = insertvalue { i64*, { i64, i1 } } %yd3, { i64, i1 } %x14, 1
    br label %ctd_ifb

  ctd_ifb:
    %x16 = phi { i64*, { i64, i1 } } [ %x15, %elseb ], [ %x13, %thenb ]
    br label %ctd_if

  ctd_if:
    %x17 = phi { i64*, { i64, i1 } } [ %x16, %ctd_ifb ], [ %x11, %ctd_ifa ]
    br label %while_start

  while_end:
    %a1a2 = extractvalue { i64*, { i64, i1 } } %xea, 0
    %xfa2 = extractvalue { i64*, { i64, i1 } } %xea, 1
    %a1b2 = extractvalue { i64, i1 } %xfa2, 0
    %a2b2 = extractvalue { i64, i1 } %xfa2, 1
    %xga2 = sub i64 %x2, %x1
    %xha2 = udiv i64 %xga2, 2
    %xi1 = icmp slt i64 %a1b2, %xha2
    br i1 %xi1, label %thenc, label %elsec

  thenc:
    %xj1 = mul i64 2, %a1b2
    %xka = add i64 %xj1, 1
    %xl1 = add i64 %x1, %xka
    %xm1 = getelementptr i64, i64* %a1a2, i64 %xl1
    %ra1 = load i64, i64* %xm1
    %xn1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xo1 = insertvalue { i64, i64* } %xn1, i64* %a1a2, 1
    %a1c1 = extractvalue { i64, i64* } %xo1, 0
    %a2a1 = extractvalue { i64, i64* } %xo1, 1
    %xp1 = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %x, i64 %a1, i64 %a1c1)
    %p1 = getelementptr i64, i64* %a2a1, i64 %xl1
    store i64 %a1c1, i64* %p1
    br i1 %xp1, label %thend, label %elsed

  thend:
    %xs1 = add i64 %x1, %xka
    %xt = getelementptr i64, i64* %a1a2, i64 %xs1
    %rb1 = load i64, i64* %xt
    %xu = insertvalue { i64, i64* } zeroinitializer, i64 %rb1, 0
    %xv = insertvalue { i64, i64* } %xu, i64* %a1a2, 1
    %a1ca2 = extractvalue { i64, i64* } %xv, 0
    %a2c2 = extractvalue { i64, i64* } %xv, 1
    %xw2 = add i64 %x1, %a1b2
    %pa1 = getelementptr i64, i64* %a2c2, i64 %xw2
    store i64 %a1ca2, i64* %pa1
    %xy2 = add i64 %x1, %xka
    %pb2 = getelementptr i64, i64* %a2c2, i64 %xy2
    store i64 %a1, i64* %pb2
    br label %ctd_ifd

  elsed:
    %xs2 = add i64 %x1, %a1b2
    %pa2 = getelementptr i64, i64* %a1a2, i64 %xs2
    store i64 %a1, i64* %pa2
    br label %ctd_ifd

  ctd_ifd:
    %x18 = phi i64* [ %a1a2, %elsed ], [ %a2c2, %thend ]
    br label %ctd_ifc

  elsec:
    %xj2 = add i64 %x1, %a1b2
    %p2 = getelementptr i64, i64* %a1a2, i64 %xj2
    store i64 %a1, i64* %p2
    br label %ctd_ifc

  ctd_ifc:
    %x19 = phi i64* [ %a1a2, %elsec ], [ %x18, %ctd_ifd ]
    ret i64* %x19
}

define i64* @Sorting_Ex_Array_Idxs_IDXO_heapify_btu_impl(i32* %x, i64 %x1, i64 %x2, i64* %x3) {

  start:
    %xa = sub i64 %x2, 1
    %xb = insertvalue { i64*, i64 } zeroinitializer, i64* %x3, 0
    %xc = insertvalue { i64*, i64 } %xb, i64 %xa, 1
    br label %while_start

  while_start:
    %xaa = phi { i64*, i64 } [ %x6, %while_body ], [ %xc, %start ]
    %a1 = extractvalue { i64*, i64 } %xaa, 0
    %x4 = extractvalue { i64*, i64 } %xaa, 1
    %x5 = icmp slt i64 %x1, %x4
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xaa, 0
    %a2 = extractvalue { i64*, i64 } %xaa, 1
    %xba = sub i64 %a2, 1
    %xca = call i64* @Sorting_Ex_Array_Idxs_IDXO_sift_down_impl (i32* %x, i64 %x1, i64 %x2, i64 %xba, i64* %a11)
    %xda = insertvalue { i64*, i64 } zeroinitializer, i64* %xca, 0
    %x6 = insertvalue { i64*, i64 } %xda, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xaa, 0
    %a21 = extractvalue { i64*, i64 } %xaa, 1
    ret i64* %a12
}

define { i64*, i64 } @Sorting_Ex_Array_Idxs_IDXO_qs_partition_impl(i32* %x, i64 %x1, i64 %x2, i64 %x3, i64* %x4) {

  start:
    br label %while_start

  while_start:
    %s = phi i64 [ %x6, %while_body ], [ %x1, %start ]
    %x5 = getelementptr i64, i64* %x4, i64 %s
    %r = load i64, i64* %x5
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x4, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = getelementptr i64, i64* %a2, i64 %x3
    %ra = load i64, i64* %xc
    %xd = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xe = insertvalue { i64, i64* } %xd, i64* %a2, 1
    %a1a = extractvalue { i64, i64* } %xe, 0
    %a2a = extractvalue { i64, i64* } %xe, 1
    %xf = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %x, i64 %a1, i64 %a1a)
    %p = getelementptr i64, i64* %a2a, i64 %s
    store i64 %a1, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %x3
    store i64 %a1a, i64* %pa
    br i1 %xf, label %while_body, label %while_end

  while_body:
    %x6 = add i64 %s, 1
    br label %while_start

  while_end:
    %xaa = sub i64 %x2, 1
    br label %while_starta

  while_starta:
    %s1 = phi i64 [ %x8, %while_bodya ], [ %xaa, %while_end ]
    %xb1 = getelementptr i64, i64* %x4, i64 %x3
    %r1 = load i64, i64* %xb1
    %xc1 = insertvalue { i64, i64* } zeroinitializer, i64 %r1, 0
    %xd1 = insertvalue { i64, i64* } %xc1, i64* %x4, 1
    %a11 = extractvalue { i64, i64* } %xd1, 0
    %a21 = extractvalue { i64, i64* } %xd1, 1
    %xe1 = getelementptr i64, i64* %a21, i64 %s1
    %ra1 = load i64, i64* %xe1
    %xf1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xg = insertvalue { i64, i64* } %xf1, i64* %a21, 1
    %a1a1 = extractvalue { i64, i64* } %xg, 0
    %a2a1 = extractvalue { i64, i64* } %xg, 1
    %xh = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %x, i64 %a11, i64 %a1a1)
    %p1 = getelementptr i64, i64* %a2a1, i64 %x3
    store i64 %a11, i64* %p1
    %pa1 = getelementptr i64, i64* %a2a1, i64 %s1
    store i64 %a1a1, i64* %pa1
    br i1 %xh, label %while_bodya, label %while_enda

  while_bodya:
    %x8 = sub i64 %s1, 1
    br label %while_starta

  while_enda:
    %xc2 = insertvalue { i64, i64 } zeroinitializer, i64 %s, 0
    %tmpa = insertvalue { i64, i64 } %xc2, i64 %s1, 1
    %xd2 = insertvalue { i64*, { i64, i64 } } zeroinitializer, i64* %x4, 0
    %xe2 = insertvalue { i64*, { i64, i64 } } %xd2, { i64, i64 } %tmpa, 1
    br label %while_startb

  while_startb:
    %xca = phi { i64*, { i64, i64 } } [ %x14, %while_endd ], [ %xe2, %while_enda ]
    %a12 = extractvalue { i64*, { i64, i64 } } %xca, 0
    %xda = extractvalue { i64*, { i64, i64 } } %xca, 1
    %a = extractvalue { i64, i64 } %xda, 0
    %x9 = extractvalue { i64, i64 } %xda, 1
    %x10 = icmp slt i64 %a, %x9
    br i1 %x10, label %while_bodyb, label %while_endb

  while_bodyb:
    %a13 = extractvalue { i64*, { i64, i64 } } %xca, 0
    %xda1 = extractvalue { i64*, { i64, i64 } } %xca, 1
    %a1a2 = extractvalue { i64, i64 } %xda1, 0
    %a2a2 = extractvalue { i64, i64 } %xda1, 1
    %xea = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a13, i64 %a1a2, i64 %a2a2)
    %xfa = add i64 %a1a2, 1
    br label %while_startc

  while_startc:
    %s2 = phi i64 [ %x11, %while_bodyc ], [ %xfa, %while_bodyb ]
    %xg1 = getelementptr i64, i64* %xea, i64 %s2
    %r2 = load i64, i64* %xg1
    %xh1 = insertvalue { i64, i64* } zeroinitializer, i64 %r2, 0
    %xi = insertvalue { i64, i64* } %xh1, i64* %xea, 1
    %a1b = extractvalue { i64, i64* } %xi, 0
    %a22 = extractvalue { i64, i64* } %xi, 1
    %xj = getelementptr i64, i64* %a22, i64 %x3
    %ra2 = load i64, i64* %xj
    %xk = insertvalue { i64, i64* } zeroinitializer, i64 %ra2, 0
    %xl = insertvalue { i64, i64* } %xk, i64* %a22, 1
    %a1aa = extractvalue { i64, i64* } %xl, 0
    %a2aa = extractvalue { i64, i64* } %xl, 1
    %xm = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %x, i64 %a1b, i64 %a1aa)
    %p2 = getelementptr i64, i64* %a2aa, i64 %s2
    store i64 %a1b, i64* %p2
    %pa2 = getelementptr i64, i64* %a2aa, i64 %x3
    store i64 %a1aa, i64* %pa2
    br i1 %xm, label %while_bodyc, label %while_endc

  while_bodyc:
    %x11 = add i64 %s2, 1
    br label %while_startc

  while_endc:
    %xha = sub i64 %a2a2, 1
    br label %while_startd

  while_startd:
    %s3 = phi i64 [ %x12, %while_bodyd ], [ %xha, %while_endc ]
    %xi1 = getelementptr i64, i64* %xea, i64 %x3
    %r3 = load i64, i64* %xi1
    %xj1 = insertvalue { i64, i64* } zeroinitializer, i64 %r3, 0
    %xk1 = insertvalue { i64, i64* } %xj1, i64* %xea, 1
    %a1b1 = extractvalue { i64, i64* } %xk1, 0
    %a23 = extractvalue { i64, i64* } %xk1, 1
    %xl1 = getelementptr i64, i64* %a23, i64 %s3
    %ra3 = load i64, i64* %xl1
    %xm1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra3, 0
    %xn = insertvalue { i64, i64* } %xm1, i64* %a23, 1
    %a1aa1 = extractvalue { i64, i64* } %xn, 0
    %a2aa1 = extractvalue { i64, i64* } %xn, 1
    %xo = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %x, i64 %a1b1, i64 %a1aa1)
    %p3 = getelementptr i64, i64* %a2aa1, i64 %x3
    store i64 %a1b1, i64* %p3
    %pa3 = getelementptr i64, i64* %a2aa1, i64 %s3
    store i64 %a1aa1, i64* %pa3
    br i1 %xo, label %while_bodyd, label %while_endd

  while_bodyd:
    %x12 = sub i64 %s3, 1
    br label %while_startd

  while_endd:
    %xj2 = insertvalue { i64*, { i64, i64 } } zeroinitializer, i64* %xea, 0
    %xk2 = insertvalue { i64, i64 } zeroinitializer, i64 %s2, 0
    %x13 = insertvalue { i64, i64 } %xk2, i64 %s3, 1
    %x14 = insertvalue { i64*, { i64, i64 } } %xj2, { i64, i64 } %x13, 1
    br label %while_startb

  while_endb:
    %a14 = extractvalue { i64*, { i64, i64 } } %xca, 0
    %xda2 = extractvalue { i64*, { i64, i64 } } %xca, 1
    %a1a3 = extractvalue { i64, i64 } %xda2, 0
    %a2a3 = extractvalue { i64, i64 } %xda2, 1
    %xea1 = insertvalue { i64*, i64 } zeroinitializer, i64* %a14, 0
    %x15 = insertvalue { i64*, i64 } %xea1, i64 %a1a3, 1
    ret { i64*, i64 } %x15
}

define i64* @Sorting_Ex_Array_Idxs_IDXO_introsort_aux_impl(i32* %x, i64* %x1, i64 %x2, i64 %x3, i64 %x4) {

  start:
    %x5 = insertvalue { i64, i64 } zeroinitializer, i64 %x3, 0
    %tmpa = insertvalue { i64, i64 } %x5, i64 %x4, 1
    %xa = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %x2, 0
    %tmpab = insertvalue { i64, { i64, i64 } } %xa, { i64, i64 } %tmpa, 1
    %xb = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %x1, 0
    %x6 = insertvalue { i64*, { i64, { i64, i64 } } } %xb, { i64, { i64, i64 } } %tmpab, 1
    %x7 = call i64* @Sorting_Ex_Array_Idxs_IDXO_introsort_aux_impl_f_013184118 (i32* %x, { i64*, { i64, { i64, i64 } } } %x6)
    ret i64* %x7
}

define i64* @Sorting_Ex_Array_Idxs_IDXO_is_guarded_insert_impl(i32* %x, i64* %x1, i64 %x2, i64 %x3) {

  start:
    %x4 = getelementptr i64, i64* %x1, i64 %x3
    %r = load i64, i64* %x4
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x1, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = insertvalue { i64*, i64 } zeroinitializer, i64* %a2, 0
    %xd = insertvalue { i64*, i64 } %xc, i64 %x3, 1
    br label %while_start

  while_start:
    %xca = phi { i64*, i64 } [ %x6, %while_body ], [ %xd, %start ]
    %a1a = extractvalue { i64*, i64 } %xca, 0
    %a2a = extractvalue { i64*, i64 } %xca, 1
    %xda = icmp slt i64 %x2, %a2a
    br i1 %xda, label %then, label %else

  then:
    %bic = sub i64 %a2a, 1
    %xea = getelementptr i64, i64* %a1a, i64 %bic
    %ra = load i64, i64* %xea
    %xf = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xg = insertvalue { i64, i64* } %xf, i64* %a1a, 1
    %a1b = extractvalue { i64, i64* } %xg, 0
    %a2b = extractvalue { i64, i64* } %xg, 1
    %xh = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %x, i64 %a1, i64 %a1b)
    %p = getelementptr i64, i64* %a2b, i64 %bic
    store i64 %a1b, i64* %p
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x5 = phi i1 [ 0, %else ], [ %xh, %then ]
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { i64*, i64 } %xca, 0
    %a2a1 = extractvalue { i64*, i64 } %xca, 1
    %xda1 = sub i64 %a2a1, 1
    %xea1 = getelementptr i64, i64* %a1a1, i64 %xda1
    %ra1 = load i64, i64* %xea1
    %xf1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xg1 = insertvalue { i64, i64* } %xf1, i64* %a1a1, 1
    %a1b1 = extractvalue { i64, i64* } %xg1, 0
    %a2b1 = extractvalue { i64, i64* } %xg1, 1
    %p1 = getelementptr i64, i64* %a2b1, i64 %a2a1
    store i64 %a1b1, i64* %p1
    %xia = sub i64 %a2a1, 1
    %xj = insertvalue { i64*, i64 } zeroinitializer, i64* %a2b1, 0
    %x6 = insertvalue { i64*, i64 } %xj, i64 %xia, 1
    br label %while_start

  while_end:
    %a1a2 = extractvalue { i64*, i64 } %xca, 0
    %a2a2 = extractvalue { i64*, i64 } %xca, 1
    %p2 = getelementptr i64, i64* %a1a2, i64 %a2a2
    store i64 %a1, i64* %p2
    ret i64* %a1a2
}

define i64* @Sorting_Ex_Array_Idxs_IDXO_is_unguarded_insert_impl(i32* %x, i64* %x1, i64 %x2, i64 %x3) {

  start:
    %x4 = getelementptr i64, i64* %x1, i64 %x3
    %r = load i64, i64* %x4
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x1, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = insertvalue { i64*, i64 } zeroinitializer, i64* %a2, 0
    %xd = insertvalue { i64*, i64 } %xc, i64 %x3, 1
    br label %while_start

  while_start:
    %xca = phi { i64*, i64 } [ %x5, %while_body ], [ %xd, %start ]
    %a1a = extractvalue { i64*, i64 } %xca, 0
    %a2a = extractvalue { i64*, i64 } %xca, 1
    %bic = sub i64 %a2a, 1
    %xda = getelementptr i64, i64* %a1a, i64 %bic
    %ra = load i64, i64* %xda
    %xea = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xf = insertvalue { i64, i64* } %xea, i64* %a1a, 1
    %a1b = extractvalue { i64, i64* } %xf, 0
    %a2b = extractvalue { i64, i64* } %xf, 1
    %xg = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %x, i64 %a1, i64 %a1b)
    %p = getelementptr i64, i64* %a2b, i64 %bic
    store i64 %a1b, i64* %p
    br i1 %xg, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { i64*, i64 } %xca, 0
    %a2a1 = extractvalue { i64*, i64 } %xca, 1
    %xda1 = sub i64 %a2a1, 1
    %xea1 = getelementptr i64, i64* %a1a1, i64 %xda1
    %ra1 = load i64, i64* %xea1
    %xf1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xg1 = insertvalue { i64, i64* } %xf1, i64* %a1a1, 1
    %a1b1 = extractvalue { i64, i64* } %xg1, 0
    %a2b1 = extractvalue { i64, i64* } %xg1, 1
    %p1 = getelementptr i64, i64* %a2b1, i64 %a2a1
    store i64 %a1b1, i64* %p1
    %xia = sub i64 %a2a1, 1
    %xj = insertvalue { i64*, i64 } zeroinitializer, i64* %a2b1, 0
    %x5 = insertvalue { i64*, i64 } %xj, i64 %xia, 1
    br label %while_start

  while_end:
    %a1a2 = extractvalue { i64*, i64 } %xca, 0
    %a2a2 = extractvalue { i64*, i64 } %xca, 1
    %p2 = getelementptr i64, i64* %a1a2, i64 %a2a2
    store i64 %a1, i64* %p2
    ret i64* %a1a2
}

define i64* @Sorting_Ex_Array_Idxs_IDXO_final_insertion_sort_impl(i32* %x, i64* %x1, i64 %x2, i64 %x3) {

  start:
    %x4 = sub i64 %x3, %x2
    %xa = icmp sle i64 %x4, 16
    br i1 %xa, label %then, label %else

  then:
    %xb = add i64 %x2, 1
    %x5 = call i64* @Sorting_Ex_Array_Idxs_IDXO_guarded_insertion_sort_impl (i32* %x, i64 %x2, i64 %xb, i64 %x3, i64* %x1)
    br label %ctd_if

  else:
    %xb1 = add i64 %x2, 1
    %xc = add i64 %x2, 16
    %xd = call i64* @Sorting_Ex_Array_Idxs_IDXO_guarded_insertion_sort_impl (i32* %x, i64 %x2, i64 %xb1, i64 %xc, i64* %x1)
    %xe = add i64 %x2, 16
    %x6 = call i64* @Sorting_Ex_Array_Idxs_IDXO_unguarded_insertion_sort_impl (i32* %x, i64 %x2, i64 %xe, i64 %x3, i64* %xd)
    br label %ctd_if

  ctd_if:
    %x7 = phi i64* [ %x6, %else ], [ %x5, %then ]
    ret i64* %x7
}

define i64* @Sorting_Ex_Array_Idxs_IDXO_guarded_insertion_sort_impl(i32* %x, i64 %x1, i64 %x2, i64 %x3, i64* %x4) {

  start:
    %x5 = insertvalue { i64*, i64 } zeroinitializer, i64* %x4, 0
    %xa = insertvalue { i64*, i64 } %x5, i64 %x2, 1
    br label %while_start

  while_start:
    %xb = phi { i64*, i64 } [ %x7, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { i64*, i64 } %xb, 0
    %a2 = extractvalue { i64*, i64 } %xb, 1
    %x6 = icmp slt i64 %a2, %x3
    br i1 %x6, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xb, 0
    %a21 = extractvalue { i64*, i64 } %xb, 1
    %xaa = call i64* @Sorting_Ex_Array_Idxs_IDXO_is_guarded_insert_impl (i32* %x, i64* %a11, i64 %x1, i64 %a21)
    %xba = add i64 %a21, 1
    %xca = insertvalue { i64*, i64 } zeroinitializer, i64* %xaa, 0
    %x7 = insertvalue { i64*, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xb, 0
    %a22 = extractvalue { i64*, i64 } %xb, 1
    ret i64* %a12
}

define i64* @Sorting_Ex_Array_Idxs_IDXO_unguarded_insertion_sort_impl(i32* %x, i64 %x1, i64 %x2, i64 %x3, i64* %x4) {

  start:
    %x5 = insertvalue { i64*, i64 } zeroinitializer, i64* %x4, 0
    %xa = insertvalue { i64*, i64 } %x5, i64 %x2, 1
    br label %while_start

  while_start:
    %xb = phi { i64*, i64 } [ %x7, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { i64*, i64 } %xb, 0
    %a2 = extractvalue { i64*, i64 } %xb, 1
    %x6 = icmp slt i64 %a2, %x3
    br i1 %x6, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xb, 0
    %a21 = extractvalue { i64*, i64 } %xb, 1
    %xaa = call i64* @Sorting_Ex_Array_Idxs_IDXO_is_unguarded_insert_impl (i32* %x, i64* %a11, i64 %x1, i64 %a21)
    %xba = add i64 %a21, 1
    %xca = insertvalue { i64*, i64 } zeroinitializer, i64* %xaa, 0
    %x7 = insertvalue { i64*, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xb, 0
    %a22 = extractvalue { i64*, i64 } %xb, 1
    ret i64* %a12
}

define i64* @Sorting_Ex_Array_Idxs_IDXO_introsort_aux_impl_f_013184118(i32* %ai, { i64*, { i64, { i64, i64 } } } %x) {

  start:
    %a1 = extractvalue { i64*, { i64, { i64, i64 } } } %x, 0
    %xaa = extractvalue { i64*, { i64, { i64, i64 } } } %x, 1
    %a1a = extractvalue { i64, { i64, i64 } } %xaa, 0
    %xba = extractvalue { i64, { i64, i64 } } %xaa, 1
    %a1b = extractvalue { i64, i64 } %xba, 0
    %a2b = extractvalue { i64, i64 } %xba, 1
    %xca = sub i64 %a1b, %a1a
    %xd = icmp slt i64 16, %xca
    br i1 %xd, label %then, label %else

  then:
    %xea = icmp eq i64 %a2b, 0
    br i1 %xea, label %thena, label %elsea

  thena:
    %x1 = call i64* @heapsort_idxs (i32* %ai, i64* %a1, i64 %a1a, i64 %a1b)
    br label %ctd_ifa

  elsea:
    %xf = sub i64 %a1b, %a1a
    %xga = udiv i64 %xf, 2
    %xh = add i64 %a1a, %xga
    %xia = add i64 %a1a, 1
    %xja = sub i64 %a1b, 1
    %xk = getelementptr i64, i64* %a1, i64 %xia
    %r = load i64, i64* %xk
    %xl = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xm = insertvalue { i64, i64* } %xl, i64* %a1, 1
    %a1c = extractvalue { i64, i64* } %xm, 0
    %a2 = extractvalue { i64, i64* } %xm, 1
    %xn = getelementptr i64, i64* %a2, i64 %xh
    %ra = load i64, i64* %xn
    %xo = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xp = insertvalue { i64, i64* } %xo, i64* %a2, 1
    %a1aa = extractvalue { i64, i64* } %xp, 0
    %a2a = extractvalue { i64, i64* } %xp, 1
    %xq = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %ai, i64 %a1c, i64 %a1aa)
    %p = getelementptr i64, i64* %a2a, i64 %xia
    store i64 %a1c, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %xh
    store i64 %a1aa, i64* %pa
    br i1 %xq, label %thenb, label %elseb

  thenb:
    %xu = getelementptr i64, i64* %a1, i64 %xh
    %rb = load i64, i64* %xu
    %xv = insertvalue { i64, i64* } zeroinitializer, i64 %rb, 0
    %xw = insertvalue { i64, i64* } %xv, i64* %a1, 1
    %a1d = extractvalue { i64, i64* } %xw, 0
    %a2c = extractvalue { i64, i64* } %xw, 1
    %xx = getelementptr i64, i64* %a2c, i64 %xja
    %rc = load i64, i64* %xx
    %xy = insertvalue { i64, i64* } zeroinitializer, i64 %rc, 0
    %xz = insertvalue { i64, i64* } %xy, i64* %a2c, 1
    %a1ab = extractvalue { i64, i64* } %xz, 0
    %a2aa = extractvalue { i64, i64* } %xz, 1
    %ya = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %ai, i64 %a1d, i64 %a1ab)
    %pb = getelementptr i64, i64* %a2aa, i64 %xh
    store i64 %a1d, i64* %pb
    %pc = getelementptr i64, i64* %a2aa, i64 %xja
    store i64 %a1ab, i64* %pc
    br i1 %ya, label %thenc, label %elsec

  thenc:
    %x2 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xh)
    br label %ctd_ifc

  elsec:
    %ye = getelementptr i64, i64* %a1, i64 %xia
    %rd = load i64, i64* %ye
    %yf = insertvalue { i64, i64* } zeroinitializer, i64 %rd, 0
    %yg = insertvalue { i64, i64* } %yf, i64* %a1, 1
    %a1e = extractvalue { i64, i64* } %yg, 0
    %a2d = extractvalue { i64, i64* } %yg, 1
    %yh = getelementptr i64, i64* %a2d, i64 %xja
    %re = load i64, i64* %yh
    %yi = insertvalue { i64, i64* } zeroinitializer, i64 %re, 0
    %yj = insertvalue { i64, i64* } %yi, i64* %a2d, 1
    %a1ac = extractvalue { i64, i64* } %yj, 0
    %a2ab = extractvalue { i64, i64* } %yj, 1
    %yk = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %ai, i64 %a1e, i64 %a1ac)
    %pd = getelementptr i64, i64* %a2ab, i64 %xia
    store i64 %a1e, i64* %pd
    %pe = getelementptr i64, i64* %a2ab, i64 %xja
    store i64 %a1ac, i64* %pe
    br i1 %yk, label %thend, label %elsed

  thend:
    %x3 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xja)
    br label %ctd_ifd

  elsed:
    %x4 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xia)
    br label %ctd_ifd

  ctd_ifd:
    %x5 = phi i64* [ %x4, %elsed ], [ %x3, %thend ]
    br label %ctd_ifc

  ctd_ifc:
    %x6 = phi i64* [ %x5, %ctd_ifd ], [ %x2, %thenc ]
    br label %ctd_ifb

  elseb:
    %xu1 = getelementptr i64, i64* %a1, i64 %xia
    %rb1 = load i64, i64* %xu1
    %xv1 = insertvalue { i64, i64* } zeroinitializer, i64 %rb1, 0
    %xw1 = insertvalue { i64, i64* } %xv1, i64* %a1, 1
    %a1d1 = extractvalue { i64, i64* } %xw1, 0
    %a2c1 = extractvalue { i64, i64* } %xw1, 1
    %xx1 = getelementptr i64, i64* %a2c1, i64 %xja
    %rc1 = load i64, i64* %xx1
    %xy1 = insertvalue { i64, i64* } zeroinitializer, i64 %rc1, 0
    %xz1 = insertvalue { i64, i64* } %xy1, i64* %a2c1, 1
    %a1ab1 = extractvalue { i64, i64* } %xz1, 0
    %a2aa1 = extractvalue { i64, i64* } %xz1, 1
    %ya1 = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %ai, i64 %a1d1, i64 %a1ab1)
    %pb1 = getelementptr i64, i64* %a2aa1, i64 %xia
    store i64 %a1d1, i64* %pb1
    %pc1 = getelementptr i64, i64* %a2aa1, i64 %xja
    store i64 %a1ab1, i64* %pc1
    br i1 %ya1, label %thene, label %elsee

  thene:
    %x7 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xia)
    br label %ctd_ife

  elsee:
    %ye1 = getelementptr i64, i64* %a1, i64 %xh
    %rd1 = load i64, i64* %ye1
    %yf1 = insertvalue { i64, i64* } zeroinitializer, i64 %rd1, 0
    %yg1 = insertvalue { i64, i64* } %yf1, i64* %a1, 1
    %a1e1 = extractvalue { i64, i64* } %yg1, 0
    %a2d1 = extractvalue { i64, i64* } %yg1, 1
    %yh1 = getelementptr i64, i64* %a2d1, i64 %xja
    %re1 = load i64, i64* %yh1
    %yi1 = insertvalue { i64, i64* } zeroinitializer, i64 %re1, 0
    %yj1 = insertvalue { i64, i64* } %yi1, i64* %a2d1, 1
    %a1ac1 = extractvalue { i64, i64* } %yj1, 0
    %a2ab1 = extractvalue { i64, i64* } %yj1, 1
    %yk1 = call i1 @Sorting_Ex_Array_Idxs_idx_pcmp_impl (i32* %ai, i64 %a1e1, i64 %a1ac1)
    %pd1 = getelementptr i64, i64* %a2ab1, i64 %xh
    store i64 %a1e1, i64* %pd1
    %pe1 = getelementptr i64, i64* %a2ab1, i64 %xja
    store i64 %a1ac1, i64* %pe1
    br i1 %yk1, label %thenf, label %elsef

  thenf:
    %x8 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xja)
    br label %ctd_iff

  elsef:
    %x9 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xh)
    br label %ctd_iff

  ctd_iff:
    %x10 = phi i64* [ %x9, %elsef ], [ %x8, %thenf ]
    br label %ctd_ife

  ctd_ife:
    %x11 = phi i64* [ %x10, %ctd_iff ], [ %x7, %thene ]
    br label %ctd_ifb

  ctd_ifb:
    %xu2 = phi i64* [ %x11, %ctd_ife ], [ %x6, %ctd_ifc ]
    %xva = add i64 %a1a, 1
    %xw2 = call { i64*, i64 } @Sorting_Ex_Array_Idxs_IDXO_qs_partition_impl (i32* %ai, i64 %xva, i64 %a1b, i64 %a1a, i64* %xu2)
    %a = extractvalue { i64*, i64 } %xw2, 0
    %b = extractvalue { i64*, i64 } %xw2, 1
    %xx2 = insertvalue { i64*, i64 } zeroinitializer, i64* %a, 0
    %xy2 = insertvalue { i64*, i64 } %xx2, i64 %b, 1
    %a1ca = extractvalue { i64*, i64 } %xy2, 0
    %a2c2 = extractvalue { i64*, i64 } %xy2, 1
    %xza = sub i64 %a2b, 1
    %ya2 = insertvalue { i64, i64 } zeroinitializer, i64 %a2c2, 0
    %tmpfa = insertvalue { i64, i64 } %ya2, i64 %xza, 1
    %yb = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a1a, 0
    %tmpga = insertvalue { i64, { i64, i64 } } %yb, { i64, i64 } %tmpfa, 1
    %yc = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %a1ca, 0
    %yd = insertvalue { i64*, { i64, { i64, i64 } } } %yc, { i64, { i64, i64 } } %tmpga, 1
    %yaa = call i64* @Sorting_Ex_Array_Idxs_IDXO_introsort_aux_impl_f_013184118 (i32* %ai, { i64*, { i64, { i64, i64 } } } %yd)
    %yba = sub i64 %a2b, 1
    %yf2 = insertvalue { i64, i64 } zeroinitializer, i64 %a1b, 0
    %tmphb = insertvalue { i64, i64 } %yf2, i64 %yba, 1
    %yg2 = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a2c2, 0
    %tmpia = insertvalue { i64, { i64, i64 } } %yg2, { i64, i64 } %tmphb, 1
    %yh2 = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %yaa, 0
    %x12 = insertvalue { i64*, { i64, { i64, i64 } } } %yh2, { i64, { i64, i64 } } %tmpia, 1
    %x13 = call i64* @Sorting_Ex_Array_Idxs_IDXO_introsort_aux_impl_f_013184118 (i32* %ai, { i64*, { i64, { i64, i64 } } } %x12)
    br label %ctd_ifa

  ctd_ifa:
    %x14 = phi i64* [ %x13, %ctd_ifb ], [ %x1, %thena ]
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x15 = phi i64* [ %a1, %else ], [ %x14, %ctd_ifa ]
    ret i64* %x15
}
