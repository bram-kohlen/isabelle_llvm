; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%list_elem = type { i64, %list_elem* }

declare void @isabelle_llvm_free(i8*)
declare i8* @isabelle_llvm_calloc(i64, i64)

attributes #0 = { strictfp }

define { i64, %list_elem* } @LLVM_DS_Open_List_os_pop(%list_elem* %p) #0 {

  start:
    %n = load %list_elem, %list_elem* %p
    %a = bitcast %list_elem* %p to i8*
    call void @isabelle_llvm_free (i8* %a)
    %aa = extractvalue %list_elem %n, 0
    %na = extractvalue %list_elem %n, 1
    %xaa = insertvalue { i64, %list_elem* } zeroinitializer, i64 %aa, 0
    %aaa = extractvalue %list_elem %n, 0
    %tmpb = extractvalue %list_elem %n, 1
    %x = insertvalue { i64, %list_elem* } %xaa, %list_elem* %tmpb, 1
    ret { i64, %list_elem* } %x
}

define %list_elem* @os_rem(i64 %x, %list_elem* %p) #0 {

  start:
    %a = ptrtoint %list_elem* %p to i64
    %b = ptrtoint %list_elem* null to i64
    %tmp = icmp eq i64 %a, %b
    br i1 %tmp, label %then, label %else

  then:
    br label %ctd_if

  else:
    %n = load %list_elem, %list_elem* %p
    %aa = extractvalue %list_elem %n, 0
    %x1 = extractvalue %list_elem %n, 1
    %q = call %list_elem* @os_rem (i64 %x, %list_elem* %x1)
    %aaa = extractvalue %list_elem %n, 0
    %na = extractvalue %list_elem %n, 1
    %tmpaa = icmp eq i64 %aaa, %x
    br i1 %tmpaa, label %thena, label %elsea

  thena:
    %c = bitcast %list_elem* %p to i8*
    call void @isabelle_llvm_free (i8* %c)
    br label %ctd_ifa

  elsea:
    %ab = extractvalue %list_elem %n, 0
    %nb = extractvalue %list_elem %n, 1
    %r = insertvalue %list_elem zeroinitializer, i64 %ab, 0
    %tmpba = insertvalue %list_elem %r, %list_elem* %q, 1
    store %list_elem %tmpba, %list_elem* %p
    br label %ctd_ifa

  ctd_ifa:
    %x2 = phi %list_elem* [ %p, %elsea ], [ %q, %thena ]
    br label %ctd_if

  ctd_if:
    %x3 = phi %list_elem* [ %x2, %ctd_ifa ], [ null, %then ]
    ret %list_elem* %x3
}

define void @os_pop(%list_elem* %xsi, { i64, %list_elem* }* %resultp) #0 {

  start:
    %r = call { i64, %list_elem* } @LLVM_DS_Open_List_os_pop (%list_elem* %xsi)
    store { i64, %list_elem* } %r, { i64, %list_elem* }* %resultp
    ret void
}

define %list_elem* @os_empty() #0 {

  start:
    ret %list_elem* null
}

define %list_elem* @os_prepend(i64 %a, %list_elem* %n) #0 {

  start:
    %b = zext i1 1 to i64
    %t = getelementptr %list_elem, %list_elem* null, i64 1
    %c = ptrtoint %list_elem* %t to i64
    %d = call i8* @isabelle_llvm_calloc (i64 %b, i64 %c)
    %r = bitcast i8* %d to %list_elem*
    %ra = insertvalue %list_elem zeroinitializer, i64 %a, 0
    %tmp = insertvalue %list_elem %ra, %list_elem* %n, 1
    store %list_elem %tmp, %list_elem* %r
    ret %list_elem* %r
}

define %list_elem* @os_reverse(%list_elem* %p) #0 {

  start:
    %x = call %list_elem* @LLVM_DS_Open_List_os_reverse_aux (%list_elem* null, %list_elem* %p)
    ret %list_elem* %x
}

define i8 @os_is_empty(%list_elem* %xsi) #0 {

  start:
    %a = ptrtoint %list_elem* %xsi to i64
    %b = ptrtoint %list_elem* null to i64
    %ba = icmp eq i64 %a, %b
    br i1 %ba, label %then, label %else

  then:
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x = phi i8 [ 0, %else ], [ 1, %then ]
    ret i8 %x
}

define %list_elem* @LLVM_DS_Open_List_os_reverse_aux(%list_elem* %q, %list_elem* %p) #0 {

  start:
    %a = ptrtoint %list_elem* %p to i64
    %b = ptrtoint %list_elem* null to i64
    %tmp = icmp eq i64 %a, %b
    br i1 %tmp, label %then, label %else

  then:
    br label %ctd_if

  else:
    %v = load %list_elem, %list_elem* %p
    %aa = extractvalue %list_elem %v, 0
    %n = extractvalue %list_elem %v, 1
    %r = insertvalue %list_elem zeroinitializer, i64 %aa, 0
    %tmpaa = insertvalue %list_elem %r, %list_elem* %q, 1
    store %list_elem %tmpaa, %list_elem* %p
    %aaa = extractvalue %list_elem %v, 0
    %x = extractvalue %list_elem %v, 1
    %x1 = call %list_elem* @LLVM_DS_Open_List_os_reverse_aux (%list_elem* %p, %list_elem* %x)
    br label %ctd_if

  ctd_if:
    %x2 = phi %list_elem* [ %x1, %else ], [ %q, %then ]
    ret %list_elem* %x2
}
